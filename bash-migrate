#!/bin/bash

set -euo pipefail

##############################
# Print error message and exit
# Arguments:
#   message
#   exit code (default 1)
##############################
function die() {
  declare message="$1" exitcode="${2:-1}"
  echo "$message" >&2
  exit $exitcode
}

############################################################
# Parse global options
# Arguments:
#   $@ from the parent script
# Globals:
#   CONFIG_FILE: relative path to the config file
#   COMMAND: remaining argments not parsed as global options
############################################################
function parse_options() {
  # Defaults
  CONFIG_FILE=bash-migrate.conf

  while [[ $1 == -* ]]
  do
    local OPTION="$1"
    shift
    case "$OPTION" in
      --config)
        CONFIG_FILE="$1"
        echo "Using config file: $CONFIG_FILE"
        shift
        ;;
      *)
        die "Unknown option $OPTION"
        ;;
    esac
  done
  #FIXME: something to do with how I'm passing this stuff between functions messes up quoted options that contain spaces
  COMMAND="$@"
}

################################################
# Load config file and and check required values
# Arguments:
#   config_file: path to the config file
# Globals:
#   *: adds values from config file
################################################
function load_config() {
  source "$1"
  if [[ -z "${MIGRATION_DIR:-}" ]]; then
    die "Missing required config value MIGRATION_DIR"
  fi
  if [[ ! -d "$MIGRATION_DIR" ]]; then
    die "Migration directory $MIGRATION_DIR not found"
  fi
}

function show_usage() {
  cat >&2 <<EOF
Usage: bash-sql command [directory..]
Command is one of: migrate, create, validate, copy-init, test-config
Directory is one or more directories that contain a bash-sql.conf file and migrations.
For more details, run: bash-sql help command
and action is one of create, up, down, rollback, status, redo, and pending.
EOF
  exit 1
}

function showhelp() {
  case $1 in
    migrate)
      cat <<EOF
Migrate help
all(default) rollback up down timestamp date migration_name
EOF
      ;;
    create)
      ;;
    validate)
      ;;
    copy-init)
      ;;
    test-config)
      ;;
    *)
      ;;
  esac
}

###########################################
# Load in database specific implementations
# Arguments:
#   db_type
########################################### 
function load_db_files() {
  local db_type="$1"

  if [[ -z "${db_type}" ]]; then
    die "Missing required config value DB_TYPE"
  fi

  local db_script="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )/bash-migrate-$db_type"
  
  if [[ ! -f "$db_script" ]]; then
    die "Unknown database type: $db_type"
  fi

  source "$db_script"
}

##########################################################
# Create an empty migration
# Arguments:
#   name: Name for new migration
# Globals:
#   MIGRATION_DIR: location for migrations
#   MIRATION_FILE_EXTENSION: file extension for migrations
##########################################################
function create_migration() {
  local name="$1"

  if [[ -z "$name" ]]; then
    die "Missing required argument: migration name"
  fi

  find "$MIGRATION_DIR" -regex "$MIGRATION_DIR/[0-9]+_$name.\(up\|down\).$MIGRATION_FILE_EXTENSION" -type f | grep -q "." && die "Migration with name $name already exists"

  local timestamp=$( date +%s )
  local up_file="$MIGRATION_DIR/${timestamp}_$name.up.$MIGRATION_FILE_EXTENSION"
  local down_file="$MIGRATION_DIR/${timestamp}_$name.down.$MIGRATION_FILE_EXTENSION"
  touch "$up_file" && echo "Created $up_file"
  touch "$down_file" && echo "Created $down_file"
}

#####################################
# Parse and dispatch main command
# Arguments:
#   command: migration command to run
#   opts*: options for the command
#####################################
function run_command() {
  echo "running $@"
  local command="$1"
  local command_opts="${@:2}"

  echo "command is $command"
  echo "command_opts are $command_opts"

  #TODO: a create/reset DB option?

  case "$command" in
    migrate)
      echo "do migrate"
      ;;
    init)
      echo "init"
      #TODO remove this and just run it manually instead
      ensure_migration_table
      ;;
    create)
      create_migration "$command_opts"
      ;;
    help)
      showhelp "$command_opts"
      ;;
    *)
      show_usage
      ;;
  esac
}

SCRIPT_NAME="$0"

# Parse global command line options
parse_options "$@"

# Load the config file
load_config "$CONFIG_FILE"

# Load db-provider-specific implementations of functions
load_db_files "${DB_TYPE:-}"

# Execute the command
run_command $COMMAND
