#!/bin/bash

set -euo pipefail

##############################
# Print error message and exit
# Arguments:
#   $1: message
#   $2: exit code (default 1)
##############################
function die()
{
  declare message="$1" exitcode="${2:-1}"
  echo "$message" >&2
  exit $exitcode
}

#########################
# Default config values #
#########################
CONFIG_FILE=bash-migrate.conf

#################
# Parse options #
#################

while [[ $1 == -* ]]
do
  OPTION="$1"
  shift
  case "$OPTION" in
    --config)
      CONFIG_FILE="$1"
      echo "Using config file: $CONFIG_FILE"
      shift
      ;;
    *)
      die "Unknown option $OPTION"
      ;;
  esac
done

#################################################
# Loads the config and checks for required values
# Globals:
#   CONFIG_FILE: name of the config file to use
#   SCRIPT_HOME: location of the main script
#   *: adds values from config file
#################################################
function load_config() {
  #TODO: move SCRIPT_HOME calculation into here?
  source "$CONFIG_FILE"
  if [[ -z "${MIGRATION_DIR:-}" ]]; then
    die "Missing required config value MIGRATION_DIR"
  fi
  if [[ ! -d "$MIGRATION_DIR" ]]; then
    die "Migration directory $MIGRATION_DIR not found"
  fi
}

#################################
# Load and Validate Config File #
#################################
load_config

#############################
# Parse and execute command #
#############################

COMMAND="$1"
shift

#TODO: a create/reset DB option?
function showusage()
{
  cat >&2 <<EOF
Usage: bash-sql command [directory..]
Command is one of: migrate, create, validate, copy-init, test-config
Directory is one or more directories that contain a bash-sql.conf file and migrations.
For more details, run: bash-sql help command
and action is one of create, up, down, rollback, status, redo, and pending.
EOF
}

function showhelp()
{
  case $1 in
    migrate)
      cat <<EOF
Migrate help
all(default) rollback up down timestamp date migration_name
EOF
      ;;
    create)
      ;;
    validate)
      ;;
    copy-init)
      ;;
    test-config)
      ;;
    *)
      ;;
  esac
}


# TODO: store most of the stuff below in a separate script that can be
#       run in a subshell in order to support multiple migration dirs at once?

###########################################
# Load in database specific implementations
# Arguments:
#   db_type
########################################### 
function load_db_files() {
  local db_type="$1"

  if [[ -z "${db_type}" ]]; then
    die "Missing required config value DB_TYPE"
  fi

  local db_script="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )/bash-migrate-$db_type"
  
  if [[ ! -f "$db_script" ]]; then
    die "Unknown database type: $db_type"
  fi

  source "$db_script"
}

load_db_files "${DB_TYPE:-}"

case "$COMMAND" in
  migrate)
    echo "do migrate"
    ;;
  init)
    echo "init"
    #TODO remove this and just run it manually instead
    ensure_migration_table
    ;;
  create)
    echo "do create"
    MIGRATION_NAME="$1"
    shift

    if [[ -z "$MIGRATION_NAME" ]]
    then
      echo "Missing required argument: migration name" >&2
      #TODO: usage message?
      exit 1
    fi

    find "$MIGRATION_DIR" -regex "$MIGRATION_DIR/[0-9]+_$MIGRATION_NAME.\(up\|down\).$MIGRATION_FILE_EXTENSION" -type f | grep -q "." && { echo "Migration with name $MIGRATION_NAME already exists" >&2; exit 1; }

    TIMESTAMP=$( date +%s )
    UP_FILE="$MIGRATION_DIR/${TIMESTAMP}_$MIGRATION_NAME.up.$MIGRATION_FILE_EXTENSION"
    DOWN_FILE="$MIGRATION_DIR/${TIMESTAMP}_$MIGRATION_NAME.down.$MIGRATION_FILE_EXTENSION"
    touch "$UP_FILE" && echo "Created $UP_FILE"
    touch "$DOWN_FILE" && echo "Created $DOWN_FILE"
    ;;
  help)
    showhelp
    exit 0
    ;;
  *)
    echo "Unknown command. Run "sql_bash help" for help."
    exit 1
    ;;
esac
