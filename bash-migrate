#!/bin/bash

set -euo pipefail

##############################
# Prints message.
# DEBUG messages are suppressed if the VERBOSE environment var isn't set.
# ERROR and FATAL messages are sent to stderr instead of stdout
# FATAL messages cause the process to exit 1
#
# Arguments:
#   message
#   level DEBUG|INFO|WARN|ERROR|FATAL (default: INFO) Debug level messages are suppressed unless VERBOSE is set
##############################
function log() {
  declare message="$1" level="${2:-INFO}"

  # Bail on fn is VERBOSE isn't set and level is DEBUG
  if [[ -z "${VERBOSE:-}" && "$level" = "DEBUG" ]]; then
    return
  fi

  case "$level" in
    DEBUG | INFO | WARN)
      echo "$level: $message"
      ;;
    ERROR | FATAL)
      echo "$level: $message" >&2
      ;;
    *)
      log "Unknown log level $level" FATAL
      ;;
  esac

  # Exit script if level was FATAL
  if [[ "$level" = "FATAL" ]]; then
    exit 1
  fi
}

############################################################
# Parse global options
# Arguments:
#   $@ from the parent script
# Globals:
#   MIGRATION_DIR: relative path to the config file
#   VERBOSE: sets verbose mode for the rest of the script
#   COMMAND: remaining argments not parsed as global options
############################################################
function parse_options() {
  # Defaults
  MIGRATION_DIR=${MIGRATION_DIR:-migrations}
  unset VERBOSE

  while [[ -n ${1:-} && $1 == -* ]]
  do
    local OPTION="$1"
    shift
    case "$OPTION" in
      -d |  --dir)
        MIGRATION_DIR="$1"
        shift
        ;;
      -v | --verbose)
        VERBOSE=1
        ;;
      *)
        log "Unknown option $OPTION" FATAL
        ;;
    esac
  done

  #FIXME: something to do with how I'm passing this stuff between functions messes up quoted options that contain spaces
  log "Using migration directory: $MIGRATION_DIR" DEBUG

  COMMAND="$@"
}

################################################
# Load config file and and check required values
#
# Globals:
#   MIGRATION_DIR: Directory to look in for config file
#   CONFIG_FILE: Name of the config file (default: bash-migrate.conf)
#   *: adds values from config file
################################################
function load_config() {
  # if [[ ! -d "$MIGRATION_DIR" ]]; then
  #   log "Migration directory $MIGRATION_DIR not found" FATAL
  # fi
  declare config_file="$MIGRATION_DIR/${CONFIG_FILE:-bash-migrate.conf}"
  if [[ -f "$config_file" ]]; then
    log "Using config file at $config_file" DEBUG
    source "$config_file"
  else
    log "No config file found at $config_file" WARN
  fi
}

function show_usage() {
  cat >&2 <<EOF
Usage: bash-sql command [directory..]
Command is one of: migrate, create, validate, copy-init, test-config
Directory is one or more directories that contain a bash-sql.conf file and migrations.
For more details, run: bash-sql help command
and action is one of create, up, down, rollback, status, redo, and pending.
EOF
  exit 1
}

function showhelp() {
  case $1 in
    migrate)
      cat <<EOF
Migrate help
all(default) rollback up down timestamp date migration_name
EOF
      ;;
    create)
      ;;
    validate)
      ;;
    copy-init)
      ;;
    test-config)
      ;;
    *)
      ;;
  esac
}

###########################################
# Load in database specific implementations
# Arguments:
#   db_type
########################################### 
function load_db_files() {
  local db_type="$1"

  if [[ -z "${db_type}" ]]; then
    log "Missing required config value DB_TYPE" FATAL
  fi

  local db_script="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )/provider-$db_type"
  
  if [[ ! -f "$db_script" ]]; then
    log "Unknown database type: $db_type" FATAL
  fi

  source "$db_script"
}

##########################################################
# Create an empty migration
# Arguments:
#   name: Name for new migration
# Globals:
#   MIGRATION_DIR: location for migrations
#   MIRATION_FILE_EXTENSION: file extension for migrations
##########################################################
function create_migration() {
  local name="$1"

  if [[ -z "$name" ]]; then
    log "Missing required argument: migration name" FATAL
  fi

  find "$MIGRATION_DIR" -regex "$MIGRATION_DIR/[0-9]+_$name.\(up\|down\).$MIGRATION_FILE_EXTENSION" -type f | grep -q "." && log "Migration with name $name already exists" FATAL

  local timestamp=$( date +%s )
  local up_file="$MIGRATION_DIR/${timestamp}_$name.up.$MIGRATION_FILE_EXTENSION"
  local down_file="$MIGRATION_DIR/${timestamp}_$name.down.$MIGRATION_FILE_EXTENSION"
  touch "$up_file" && echo "Created $up_file"
  touch "$down_file" && echo "Created $down_file"
}

#####################################
# Parse and dispatch main command
# Arguments:
#   command: migration command to run
#   opts*: options for the command
#####################################
function run_command() {
  log "running $@" DEBUG
  local command="$1"
  local command_opts="${@:2}"

  #TODO: a create/reset DB option?

  case "$command" in
    migrate)
      echo "do migrate"
      ;;
    init)
      echo "init"
      #TODO remove this and just run it manually instead
      ensure_migration_table
      ;;
    create)
      create_migration "$command_opts"
      ;;
    help)
      showhelp "$command_opts"
      ;;
    *)
      show_usage
      ;;
  esac
}

echo "yo"

# Parse global command line options
parse_options "$@"

# Load the config file
load_config

# Load db-provider-specific implementations of functions
load_db_files "${DB_TYPE:-}"

# Execute the command
run_command $COMMAND
