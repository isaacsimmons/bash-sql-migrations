#!/bin/bash

set -euo pipefail

SCRIPT_HOME="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

#########################
# Default config values #
#########################
CONFIG_FILE=bash-migrate.conf

#################
# Parse options #
#################

while [[ $1 == -* ]]
do
  OPTION="$1"
  shift
  case "$OPTION" in
    --config)
      CONFIG_FILE="$1"
      echo "Using config file: $CONFIG_FILE"
      shift
      ;;
    *)
      echo "Unknown option $OPTION" >&2
      exit 1
      ;;
  esac
done

#################################
# Load and Validate Config File #
#################################

source "$CONFIG_FILE"

if [[ -z "${DB_TYPE:-}" ]]
then
   echo "Missing required config value DB_TYPE" >&2
   exit 1
fi

# Load migration functions for specified database type
if [[ ! -f "$SCRIPT_HOME/bash-migrate-$DB_TYPE" ]]
then
  echo "Unknown DB_TYPE: $DB_TYPE" >&2
  exit 1
fi

if [[ -z "${MIGRATION_DIR:-}" ]]
then
   echo "Missing required config value MIGRATION_DIR" >&2
   exit 1
fi

if [[ ! -d "$MIGRATION_DIR" ]]
then
   echo "Migration directory $MIGRATION_DIR not found" >&2
   exit 1
fi

#############################
# Parse and execute command #
#############################

COMMAND="$1"
shift

#TODO: a create/reset DB option?
function showusage()
{
  cat >&2 <<EOF
Usage: bash-sql command [directory..]
Command is one of: migrate, create, validate, copy-init, test-config
Directory is one or more directories that contain a bash-sql.conf file and migrations.
For more details, run: bash-sql help command
and action is one of create, up, down, rollback, status, redo, and pending.
EOF
}

function showhelp()
{
  case $1 in
    migrate)
      cat <<EOF
Migrate help
all(default) rollback up down timestamp date migration_name
EOF
      ;;
    create)
      ;;
    validate)
      ;;
    copy-init)
      ;;
    test-config)
      ;;
    *)
      ;;
  esac
}


# TODO: store most of the stuff below in a separate script that can be
#       run in a subshell in order to support multiple migration dirs at once?

# Load in DB_TYPE specific implementations for functions
source "$SCRIPT_HOME/bash-migrate-$DB_TYPE"

case "$COMMAND" in
  migrate)
    echo "do migrate"
    ;;
  init)
    echo "init"
    #TODO remove this and just run it manually instead
    ensure_migration_table
    ;;
  create)
    echo "do create"
    MIGRATION_NAME="$1"
    shift

    if [[ -z "$MIGRATION_NAME" ]]
    then
      echo "Missing required argument: migration name" >&2
      #TODO: usage message?
      exit 1
    fi

    find "$MIGRATION_DIR" -regex "$MIGRATION_DIR/[0-9]+_$MIGRATION_NAME.\(up\|down\).$MIGRATION_FILE_EXTENSION" -type f | grep -q "." && { echo "Migration with name $MIGRATION_NAME already exists" >&2; exit 1; }


    TIMESTAMP=$( date +%s )
    touch "$MIGRATION_DIR/${TIMESTAMP}_$MIGRATION_NAME.up.$MIGRATION_FILE_EXTENSION"
    touch "$MIGRATION_DIR/${TIMESTAMP}_$MIGRATION_NAME.down.$MIGRATION_FILE_EXTENSION"
    echo "Created $MIGRATION_DIR/${TIMESTAMP}_$MIGRATION_NAME.(up|down).$MIGRATION_FILE_EXTENSION"
    ;;
  help)
    showhelp
    exit 0
    ;;
  *)
    echo "Unknown command. Run "sql_bash help" for help."
    exit 1
    ;;
esac
